* Elixir's set-theoretic type system

** Elixir's set-theoretic type system

A research and development project to gradually introduce a static type system to Elixir.

\small
Giuseppe Castagna, Guillaume Duboc, and Jos√© Valim. The Design Principles of the Elixir Type System
The Art, Science, and Engineering of Programming, 2024, Vol. 8, Issue 2, Article 4
https://doi.org/10.22152/programming-journal.org/2024/8/4

** Requirements

- no modification to the syntax of Elixir expressions
- gradual typing
- extract maximum type information from patterns and guards
- mode to emit warnings when explicitly using gradual typing
- type annotations across language before advanced features
- initially - typing does not modify the compilation of Elixir code

** Features of the type system

- semantic subtyping hence set-theoretic
- parametric polymorphism with local type inference
  + type variables
  + requires some type annotations--but not everywhere
- use patterns and guards
- typing maps in all use-cases
- gradual typing
- strong arrows
- typing ad-hoc polymorphism

** Semantic subtyping

- establish subtyping relationships between types based on the semantic meaning of values of the types
- semantic meaning derived from treating types as sets, values as set members
- set operations on types: union, intersection, and negation

** Semantic subtyping

- in comparison to Hindley-Milner, relax $U = V$ to $U \subseteq V$
- strictly more general--an extension to HM
- Frish et. al. referencing Aiken & Wimmers (also ref. by Marlow & Wadler)
- good idea because dynamically-typed languages variables can hold different types at run-time: hence union-ing



** Subtyping in type checking
- subtyping is a means to typechecking programs due to ``subsumption"

\huge
#+BEGIN_EXPORT latex
  \begin{center}
   $\frac{e : T_1 \quad T_1 <: T_2}{e : T_2}$
   \end{center}
#+END_EXPORT

- given some expression $e$ and types $T_1$ and $T_2$, if the type of $e$ is $T_1$ and $T_1$ is a subtype of $T_2$ then $e$ can be considered to also be of type $T_2$

** Set-theoretic reasoning and type annotations

- the notation is based on Erlang/Elixir typespec
#+BEGIN_SRC elixir
integer(), boolean(), binary(), float(), ... # indivisible types

atom(), :foo, # divisible types

list(element()) # element() is a concrete type

container(a) when a: term() # a is a type variable

%{required(:name) => binary(), ...}
# a map that must have at least a key :name of value binary()

%{required(:name) => binary(), required(:age) => integer()}
# a map that can have only :name and :age keys
#+END_SRC

** Set-theoretic reasoning and type annotations

- special types
#+BEGIN_SRC elixir
term() # top type

none() # bottom type

dynamic() # any type
#+END_SRC


** Set-theoretic reasoning and type annotations

#+BEGIN_SRC elixir
# union
integer() or boolean()

# intersection
# say we have these typespec types
@type person :: %{:name => binary(), :age => integer()}
@type school_record :: %{:school => binary(), :gpa => float()}
# and we want a student() type
person() and school_record()

# negation
not integer()

# combinations - e.g. all atoms except true, false, nil
atom() and not(boolean() or nil)
#+END_SRC

** Set-theoretic reasoning and type annotations

#+BEGIN_SRC elixir
term() === not none()

none() === not term()

boolean() and integer() === none()
#+END_SRC


** Set-theoretic reasoning and type annotations

- type annotation of functions with =$= - only reserved symbol left unused!
- function arguments comma-separated
- function application =->=

#+BEGIN_SRC elixir
$ (integer(), integer()) -> integer()
def add(x,y), do: x + y
#+END_SRC

** Set-theoretic reasoning and type annotations

- function types are set-theoretic too
#+BEGIN_SRC elixir

$ integer() -> integer()
def negate(x) when is_integer(x), do: -x

$ (integer(), integer()) -> integer()
def subtract(a, b) when is_integer(a) and is_integer(b) do
  a + negate(b)
end
#+END_SRC

** Set-theoretic reasoning and type annotations

- function types are set-theoretic too: let's expand negate to =boolean()=
#+BEGIN_SRC elixir
$ (integer() or boolean()) -> (integer() or boolean())
def negate(x) when is_integer(x), do: -x
def negate(x) when is_boolean(x), do: not x
#+END_SRC

** Set-theoretic reasoning and type annotations

#+BEGIN_SRC elixir
$ (integer() or boolean()) -> (integer() or boolean())
def negate(x) when is_integer(x), do: -x
def negate(x) when is_boolean(x), do: not x

Type warning:
  | def subtract(a, b) when is_integer(a) and is_integer(b) do
  |   a + negate(b)
        ^ the operator + expects integer(), integer() as arguments,
          but the second argument can be integer() or boolean()

#+END_SRC

** Set-theoretic reasoning and type annotations

#+BEGIN_SRC elixir
$ (integer() or boolean()) -> (integer() or boolean())
def negate(x) when is_integer(x), do: -x
def negate(x) when is_boolean(x), do: not x

Type warning:
  | def subtract(a, b) when is_integer(a) and is_integer(b) do
  |   a + negate(b)
        ^ the operator + expects integer(), integer() as arguments,
          but the second argument can be integer() or boolean()

# a more precise (and correct in regards to subtract) type
$ (integer() -> integer()) and (boolean() -> boolean())

# negate is in the set of functions integer() -> integer()
# and the set of functions boolean() -> boolean()
#+END_SRC

** Polymorphic with local type inference

- type variables: =a, b= - no parentheses
- local type inference
  + functions must have type annotations
  + types are inferred for arguments and return types

** Polymorphic with local type inference

#+BEGIN_SRC elixir
$ (list(a), a -> b) -> list(b)
def map([], _), do: []
def map([x | xs], f), do:  [f.(x) | map(xs, f)]

x = map([1, 2, 3], &double/1)
# type system infers type of double and x
#+END_SRC

** Guards and pattern-matching
- Elixir has rich run-time testing of types
- the type system can type captured variables and variables in guards

#+BEGIN_SRC elixir
def elem_at([x | rest] = xs, pos) when is_integer(pos) do...
#+END_SRC

** Guards and pattern-matching
- ``type narrowing" can check exhaustiveness of case expressions
- type system is conservative: case branches must handle =xs= being any map or list
#+BEGIN_SRC elixir
def elem_at(xs, pos) when is_map(xs) or is_list(x) do
  case xs do
    %{} -> # get for map
    [] -> # get for list
    _ -> # redundant
  end
end
#+END_SRC

** Maps as ``records" and ``dictionaries"
- maps can represent records, dictionaries, and structs

#+BEGIN_SRC elixir
ashley = %{name: "Ashley", age: 42}
# %{required(:name)=> binary(),
#   required(:age) => integer()}

words = "The Elixir Type System ..."
word_count = wc(words) # :: %{optional(binary()) => integer()}
word_count["Elixir"] # 42

defstruct [:id , name: "", age: 0]
# %{
#   :__struct__ => :"User",
#   :id => term(),
#   :name => binary(),
#   :age => integer()
# }
#+END_SRC


** Maps as ``records" and ``dictionaries"
- the type system treats maps as open or closed
  + open means there are potentially unknown keys
- strict or dynamic access changes type inference

#+BEGIN_SRC elixir
user.first_name # user :: %{:first_name => term(), ...}

middle = person["middle_name"]
# person :: %{optional("middle_name") => term(), ...} => %{...}
# middle :: binary() or nil

ashley = %{name: "Ashley", age: 42}
# ashley :: %{:name => binary(), :age => integer()}
#+END_SRC

** Maps as ``records" and ``dictionaries"
- subtyping maps feels like structural subtyping...

#+BEGIN_SRC elixir
ashley = %{name: "Ashley", age: 42}
# %{:name => binary(), :age => integer()}

ashley_at_school = %{name: "Ashley", age: 42, gpa: 6.75}
#  %{:name => binary(),
#    :age => integer(),
#    :gpa => float()}

def enroll(%{name: _, age: _} = person) do ...
#+END_SRC

- but the type system innovates semantic subtyping to handle maps in all cases
  + Castagna 2023

** Gradual typing with =dynamic()=

- as per requirements, avoid boiling the ocean in existing codebases
- gradual typing: see TypeScript, gradualizer
- a type that ``materialises" into any other type
- a type that can be the subtype and supertype of any other type
  + =term()= can only be the later, so need a new type
- =dynamic()=

** Gradual typing with =dynamic()=

- ``sound gradual typing" - Siek & Taha 2006
- in the presence of dynamic typing, partial static typing still works
- a static type annotation/inference guarantees an expression either:
  + never returns
  + returns a value of the static type
  + emits a runtime exception
- necessitates the addition of runtime checks to the compiled program
- Elixir innovation: as per requirements, no change to the compiled program


** Halting =dynamic()= propagation
- VM and programmer type checks halt the propagation of =dynamic()=
- functions with these checks are referred to as ``strong arrows"

#+BEGIN_SRC elixir
$ integer() -> integer()
def id_strong(x) when is_integer(x), do: x

$ integer() -> integer()
def id_weak(x), do: x

# due to "weak" vs "strong" arrows, the following
# is an acceptable type annotation for `ids(x)`
$ dynamic() -> {dynamic(), integer()}
def ids(x), do: {id_weak(x), id_strong(x)}
#+END_SRC

** ``Solving" the expression problem with protocols
- ``ad-hoc" polymorphism akin to typeclasses
- the type system will union all implementations of =String.Chars= to define a type =String.Chars.t()=

#+BEGIN_SRC elixir
defmodule MyNewType do
  defstruct [:data]
end

defimpl String.Chars, for: MyNewType do
  def to_string(value) do ... end
end
#+END_SRC


** ``Solving" the expression problem with protocols
- combines with parametric polymorphism
- please say it is so!

#+BEGIN_SRC elixir
# functory.ex
$ Functory.t(a), (a -> b) -> Functory.t(b)
    when a: term(),  b: term()
def map(xs, f)
...
# my_struct.ex
defimpl Functory, for: MyStruct do
  def map(xs, f) do ... end
end
#+END_SRC


** Gradually introducing the system
- don't discount the chance of a deal-breaker in prod code taking them back to the drawing board
- phased approach to introducing the experimental system into production Elixir compiler
  + local inference of some Elixir types: v1.17
  + type all Elixir data types and add typing of (and use information inferred from) pattern matching and guards: v1.18
  + type annotations for functions: v1.?
