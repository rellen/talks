# Macro Madness: when busting boilerplate backfires

## Intro

https://twitter.com/robertellen

https://github.com/rellen/talks/blob/main/2022-02-16-macro-madness/macro_madness.livemd

## Macros?

Macros are the meta-programing construct in Elixir, declared through the `defmacro`... err, macro

<!-- livebook:{"force_markdown":true} -->

```elixir
  # kernel.ex
  defmacro defmacro(call, expr \\ nil) do
    define(:defmacro, call, expr, __CALLER__)
  end
```

<!-- livebook:{"break_markdown":true} -->

We can try out `defmacro`

```elixir
defmodule DefMacroExample1 do
  defmacro add_one(x) do
    x + 1
  end
end
```

For this example, it works...

```elixir
require DefMacroExample1
DefMacroExample1.add_one(2)
```

But what if we pass an expression?

```elixir
# doesn't work
require DefMacroExample1
DefMacroExample1.add_one(1 + 1)
```

Well, actually, macros are not really functions after all.

Macros receive their arguments as quoted expressions, and return "quoted" expressions.

So what is `quoting`?

```elixir
quote do
  1 + 1
end
```

This is Elixir AST (Abstract Syntax Tree) representation for `1 + 1`

It's defined in Elixir data structures - *homoiconicity*

```elixir
quote do
  Enum.map(xs, fn x -> x * 2 end)
end
```

So we should use `quote` in our `defmacro`s

```elixir
defmodule DefMacroExample2 do
  defmacro add_one(x) do
    quote do
      x + 1
    end
  end
end
```

```elixir
# doesn't work
require DefMacroExample2

DefMacroExample2.add_one(1 + 1)
```

```elixir
quote do
  x + 1
end
```

`x` is not a quoted expression, it's a variable name that `quote` will faithfully use.

<!-- livebook:{"break_markdown":true} -->

### Enter `unquote`

`unquote` accepts quoted expresions and expands them

```elixir
quote do
  unquote({:+, [context: Elixir, import: Kernel], [1, 2]})
end
```

We can see what code the macro would produce we can `Macro.to_string`

```elixir
quote do
  unquote({:+, [context: Elixir, import: Kernel], [1, 2]})
end
|> Macro.to_string()
```

And we can now grab the values out of the environment

```elixir
x = 1
y = 2
quote do: unquote(x) + unquote(y)
```

```elixir
x = 1
y = 2

quote do
  unquote(x) + unquote(y)
end
|> Macro.to_string()
```

```elixir
defmodule DefMacroExample3 do
  defmacro add_one(x) do
    quote do
      unquote(x) + 1
    end
  end
end
```

```elixir
require DefMacroExample3

DefMacroExample3.add_one(1 + 1)
```

## Boilerplate busting - Using Macros to define functions

There is a special macro name, `__using__`, that can be defined in one module and used in another.

```
   def MyModule
     use MyMacroModule
     ....
```

<!-- livebook:{"break_markdown":true} -->

We can't `def` directly in `defmacro`

```elixir
# doesn't work
defmodule UsingExample1 do
  defmacro __using__() do
    def add_one(x), do: x + 1
  end
end
```

`quote` to the rescue!

```elixir
quote do
  def add_one(x), do: x + 1
end
```

```elixir
quote do
  def add_one(x), do: x + 1
end
|> Macro.to_string()
```

Putting it together...

```elixir
defmodule UsingExample2 do
  defmacro __using__(_opts) do
    quote do
      def add_one(x), do: x + 1
    end
  end
end

defmodule UsingUsingExample2 do
  use UsingExample2
end

UsingUsingExample2.add_one(5)
```

### How can we use this?

(example from https://elixir-lang.org/getting-started/meta/macros.html)

```elixir
defmodule UnlessFun do
  def fun_unless(clause, do: expression) do
    if(!clause, do: expression)
  end
end
```

```elixir
UnlessFun.fun_unless(true, do: IO.puts("this should never be printed"))
```

### Explanation:

In Elixir function arguments are evaluated eagerly (i.e. before the function receiving the arguments is evaluated)

<!-- livebook:{"break_markdown":true} -->

So, let's try using a macro!

```elixir
defmodule UnlessMacro1 do
  defmacro macro_unless(clause, do: expression) do
    if(!clause, do: expression)
  end
end
```

```elixir
require UnlessMacro1
UnlessMacro1.macro_unless(true == fal, do: IO.puts("this should never be printed"))
```

OK, this still doesn't work, we are still evaluating the arguments before running the macro.

But then remember that we have `quote`

```elixir
defmodule UnlessMacro2 do
  defmacro macro_unless(clause, do: expression) do
    quote do
      if(!clause, do: expression)
    end
  end
end
```

Warnings! Let's see if it works...

```elixir
# doesn't work
require UnlessMacro2
UnlessMacro2.macro_unless(true, do: IO.puts("this should never be printed"))
```

Oh no, forgot the `unquote`, so `clause` and `expression` are being considered literally as variable names for the `if` call, rather than as the AST of `clause` and `expression` arguments to our `defmacro`.

```elixir
quote do
  if(!clause, do: expression)
end
```

We can't grab an outside variable with just `quote`

```elixir
x = 2
Macro.to_string(quote do: 1 + x)
```

What we really want is to grab the AST values held in `clause` and `expression`...

Let's see the difference `unquote` makes when the variable is a quoted expression

```elixir
x = quote do: IO.puts("Hello, world!")

quote do
  x
end
```

```elixir
x = quote do: IO.puts("Hello, world!")

quote do
  unquote(x)
end
```

So let's try `unquote` with arguments that are full expressions!

```elixir
defmodule UnlessMacro3 do
  defmacro macro_unless(clause, do: expression) do
    quote do
      if(!unquote(clause), do: unquote(expression))
    end
  end
end
```

```elixir
require UnlessMacro3
UnlessMacro3.macro_unless(true, do: IO.puts("this should never be printed"))
```

Happy days!

<!-- livebook:{"break_markdown":true} -->

### Explanation:

In Elixir:

* function arguments are evaluated eagerly (i.e. before the function receiving the arguments us evaluated)
* **macro arguments are not evaluated, but received as quoted expressions**

## Busting boilerplate backfiring

```elixir
defmodule MyBoilerplateMacro1 do
  defmacro __using__(_) do
    actions = [:action1, :action2]

    Enum.each(actions, fn action ->
      quote do
        def do_action(action) do
          IO.inspect(action)
        end
      end
    end)
  end
end

# def do_action(:action1), do: ...
# def do_action(:action2), do: ...
```

We've seen this before!  Let's use `unquote` to fix it.

```elixir
defmodule MyBoilerplateMacro2 do
  defmacro __using__(_) do
    actions = [:action1, :action2]

    Enum.each(actions, fn action ->
      quote do
        def do_action(unquote(action)) do
          IO.inspect(unquote(action))
        end
      end
    end)

    quote do: def(some_other_fun(x, y), do: x + y)
  end
end

defmodule MyModule2 do
  use MyBoilerplateMacro2
end
```

Weird, looks like no `do_action` functions are exported, but `some_other_fun` is

```elixir
# doesn't work
MyModule2.do_action(:action1)
```

Yep, they don't exist

```elixir
MyModule2.__info__(:functions)
```

Then we remember that `defmacro` needs to return quoted AST, and like functions, it will return the value last expression. Hence why `some_other_fun` made the cut, but not `do_action`.

We can try putting all the code in one quote.

```elixir
# doesn't work
defmodule MyBoilerplateMacro3 do
  defmacro __using__(_) do
    actions = [:action1, :action2]

    quote do
      Enum.map(unquote(actions), fn action ->
        def do_action(unquote(action)) do
          IO.inspect(unquote(action))
        end
      end)

      def some_other_fun(x, y), do: x + y
    end
  end
end

defmodule MyModule3 do
  use MyBoilerplateMacro3
end
```

Maybe we don't need the `unquote`s inside the loop

```elixir
defmodule MyBoilerplateMacro4 do
  defmacro __using__(_) do
    actions = [:action1, :action2]

    quote do
      Enum.map(unquote(actions), fn action ->
        def do_action(action) do
          IO.inspect(action)
        end
      end)

      def some_other_fun(x, y), do: x + y
    end
  end
end

defmodule MyModule4 do
  use MyBoilerplateMacro4
end
```

These warnings are saying that we got two `do_action` functions with the same argument (literally `action`).

Many other permutations could be tried, and this could be a big time sink!

After much hair-pulling...aha, a breakthrough! If `quote` returns a value, can we assign it to a variable and stitch them together?

```elixir
defmodule MyBoilerplateMacro5 do
  defmacro __using__(_) do
    actions = [:action1, :action2]

    action_funs =
      Enum.map(actions, fn action ->
        quote do
          def do_action(unquote(action)) do
            IO.inspect(unquote(action))
          end
        end
      end)

    some_other =
      quote do
        def some_other_fun(x, y), do: x + y
      end

    [action_funs, some_other]
  end
end

defmodule MyModule5 do
  use MyBoilerplateMacro5
end
```

```elixir
MyModule5.do_action(:action1)
MyModule5.do_action(:action2)
```

```elixir
MyModule5.__info__(:functions)
```

```elixir
defmodule ListFuns do
  [
    def foo() do
      :foo
    end,
    def bar() do
      :bar
    end
  ]

  def baz() do
    :baz
  end
end
```

```elixir
ListFuns.__info__(:functions)
```

```elixir
ListFuns.foo() |> IO.inspect(label: "foo")
ListFuns.bar() |> IO.inspect(label: "bar")
ListFuns.baz() |> IO.inspect(label: "baz")
:ok
```

```elixir
Macro.to_string(quote do: (unquote_splicing([1, 2])))
```

```elixir
defmodule MyBoilerplateMacro6 do
  defmacro __using__(_) do
    actions = [:action1, :action2]

    action_funs =
      Enum.map(actions, fn action ->
        quote do
          def do_action(unquote(action)) do
            IO.puts(unquote(action))
          end
        end
      end)

    some_other =
      quote do
        def some_other_fun(x, y), do: x + y
      end

    quote do
      [unquote_splicing(action_funs), unquote(some_other)]
    end
  end
end

defmodule MyModule6 do
  use MyBoilerplateMacro6
end
```

```elixir
MyModule6.do_action(:action1)
MyModule6.do_action(:action2)
:ok
```

```elixir
MyModule6.__info__(:functions)
```

### Nesting `use`

```elixir
defmodule MyBoilerplateMacro7 do
  defmacro __using__(_) do
    prelude =
      quote do
        use MyBoilerplateMacro6
      end

    actions = [:action1, :action2]

    action_funs =
      Enum.map(actions, fn action ->
        quote do
          def do_action_nested(unquote(action)) do
            IO.puts("nesting action")
            do_action(unquote(action))
          end
        end
      end)

    yet_another =
      quote do
        def yet_another_fun(x, y), do: x + y
      end

    [prelude, action_funs, yet_another]
  end
end

defmodule MyModule7 do
  use MyBoilerplateMacro7
end
```

```elixir
MyModule7.do_action_nested(:action1)
MyModule7.do_action_nested(:action2)
:ok
```

```elixir
defmodule MyBoilerplateMacro8 do
  defmacro __using__(_) do
    actions = [:action1, :action2]

    action_funs =
      Enum.map(actions, fn action ->
        quote do
          def do_action(unquote(action)) do
            IO.puts(unquote(action))
          end
        end
      end)

    some_other =
      quote do
        def some_other_fun(x, y), do: x + y
      end

    defaults =
      quote do
        def some_other_fun(x) do
          IO.puts("Catch-all for some other fun")
          some_other_fun(x, 1)
        end

        def do_action(action) do
          IO.puts("Catch-all for #{inspect(action)}")
        end
      end

    [action_funs, some_other, defaults]
  end
end

defmodule MyModule8 do
  use MyBoilerplateMacro8
end
```

```elixir
MyModule8.do_action(:action3)
MyModule8.some_other_fun(5)
```

## Beware

Macros are great! But...

```mermaid
     flowchart TD
     A[Start] --> B{Should you use macros in your code?};
     B --> C[No];
```

https://github.com/rellen/talks/blob/main/2022-02-16-macro-madness/macro_madness.livemd

```elixir
defmodule NakedUnquote do
  xs = [1, 2, 3, 4]

  Enum.each(xs, fn x ->
    IO.inspect(x)
    def foo(x, y), do: y * x
  end)
end
```
