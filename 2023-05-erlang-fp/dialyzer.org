* Success Typing with Dialyzer

** Dialyzer

- DIscrepancy anALYZer for ERlang
- static-analysis tool for Erlang, Elixir, and BEAM files
- Success Typing - optimise for avoiding false-positives

** What is Success Typing?

- technique to check programs for type inconsistencies
- does not require the type annotations, but they help
- only considers a program in error if it is certain there is an inconsistency

** Using Dialyzer in Elixir

#+BEGIN_SRC elixir
    # mix.exs
    {:dialyxir, "~> 1.3", only: [:dev], runtime: false}
#+END_SRC

#+BEGIN_SRC sh
  mix dialyzer # pass flags like --missing_return
#+END_SRC

** Type example

#+INCLUDE: "./dialyzer_example/lib/type_example.ex" src elixir :lines 1

** Type example - =wat/2=
#+BEGIN_SRC
lib/type_example.ex:6:invalid_contract
The @spec for the function does not match the success typing of the function.

Function:
DialyzerExample.TypeExample.wat/2

Success typing:
@spec wat(number(), number()) :: number()
#+END_SRC


** Type example - =add/2= (=concat/2= similarly)
#+BEGIN_SRC
lib/type_example.ex:9:no_return
Function run_add/0 has no local return.
________________________________________________________________________________
lib/type_example.ex:9:call
The function call will not succeed.
DialyzerExample.TypeExample.add(1, :two)

will never return since the 2nd arguments differ
from the success typing arguments:

(number(), number())

#+END_SRC

** Type example - extra warning flags

- =mix dialyzer --extra_return --missing_return=

#+INCLUDE: "./dialyzer_example/lib/extended_example_a.ex" src elixir :lines 1

** Type example - =extra_return=
#+BEGIN_SRC
lib/extended_example_a.ex:2:extra_range
The type specification has too many types for the function.

Function:
DialyzerExample.ExtendedExample.extra_return/1

Extra type:
:zero

Success typing:
:even | :odd

#+END_SRC

** Type example - =missing_return=
#+BEGIN_SRC
lib/extended_example_a.ex:7:missing_range
The type specification is missing types returned by function.

Function:
DialyzerExample.ExtendedExample.missing_return/1

Type specification return types:
:even | :odd

Missing from spec:
:zero

#+END_SRC

** Match example - inexhaustive function clauses

#+INCLUDE: "./dialyzer_example/lib/match_example_a.ex" src elixir :lines 1

** Match example - call unmatched function clause

#+INCLUDE: "./dialyzer_example/lib/match_example_b.ex" src elixir

** Match example - =mix dialyzer=

#+BEGIN_SRC
lib/match_example_b.ex:12:no_return
Function run/0 has no local return.
________________________________________________________________________________
lib/match_example_b.ex:14:call
The function call will not succeed.

DialyzerExample.MatchExampleB.handle({:bar, <<98, 97, 114>>})

will never return since the 1st arguments differ
from the success typing arguments:

({:foo, _})

________________________________________________________________________________
#+END_SRC

** Case Example - non-exhaustive case

#+INCLUDE: "./dialyzer_example/lib/case_example.ex" src elixir

** Tips for using Dialyzer

- start using at the beginning of a project
- run the mix task to create Persistent Lookup Table files
- cache PLTs for Erlang, Elixir, and deps in CI
 + https://github.com/team-alembic/staple-actions/tree/main/actions/mix-dialyzer
