** A taste of Erlang

\scriptsize
#+INCLUDE: "./erlang_example/src/process_example.erl" src erlang :lines 1

** A sip of Elixir

\scriptsize
#+BEGIN_SRC elixir

defmodule ProcessExample do
  def start() do
    pid = spawn(&pong/0)
    spawn(fn -> ping(3, pid) end)
  end

  def ping(n, pid) when n > 0 do
    send(pid, {:ping, self()})

    receive do
      :pong -> IO.puts("Ping received pong")
    end

    ping(n - 1, pid)
  end

  def ping(0, pid) do
    send(pid, :finished)
    IO.puts("Ping finished")
  end

#+END_SRC

** A sip of Elixir
\small
#+BEGIN_SRC elixir

  def pong() do
    receive do
      :finished ->
        IO.puts("Pong finished")

      {:ping, pid} ->
        send(pid, :pong)
        IO.puts("Pong received ping")
        pong()
    end
  end
end
#+END_SRC

** Crash

\small
#+BEGIN_SRC elixir
  def ping(0, _pid) do
    apply(:foo, :bar, [])
  end
#+END_SRC

#+BEGIN_SRC shell
Shell PID is: #PID<0.212.0>
...
[error] Process #PID<0.314.0> raised an exception
** (UndefinedFunctionError) function :foo.bar/0 is undefined
(module :foo is not available)
    :foo.bar()
#+END_SRC

** Crash with a linked process

\small
#+BEGIN_SRC elixir
  def start() do
    IO.inspect(self(), label: "Shell PID is")
    pid = spawn(&pong/0)
    spawn_link(fn -> ping(3, pid) end)
  end
#+END_SRC

#+BEGIN_SRC shell
Shell PID is: #PID<0.275.0>
...
** (EXIT from #PID<0.275.0>) shell process exited with reason:
an exception was raised:
    ** (UndefinedFunctionError) function :foo.bar/0 is undefined
    (module :foo is not available)
        :foo.bar()
#+END_SRC


** Crash with traped exits

\small
#+BEGIN_SRC elixir
 def start() do
    IO.inspect(self(), label: "Shell PID is")
    Process.flag(:trap_exit, true)
    pid = spawn(&pong/0)
    spawn_link(fn -> ping(3, pid) end)

    receive do
      msg ->
        IO.inspect(msg, label: "Got message")
    end
  end
#+END_SRC


#+BEGIN_SRC shell
Shell PID is: #PID<0.282.0>
...
15:34:57.211 [error] Process #PID<0.313.0> raised an exception
** (UndefinedFunctionError) function :foo.bar/0 is undefined
(module :foo is not available)
    :foo.bar()
Got message: {:EXIT, #PID<0.313.0>, {:undef, [{:foo, :bar, [], []}]}}
{:EXIT, #PID<0.313.0>, {:undef, [{:foo, :bar, [], []}]}}`
#+END_SRC
